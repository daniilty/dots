(defvar eww "$HOME/.local/bin/eww -c $HOME/.config/eww/bar")

(defwidget launcher []
	(box :orientation "v" 
		 :space-evenly "false" 
		 :spacing -15
  	(button :class "launcher_icon" 
		   	:onclick "scripts/popup launcher"  "󰣨")))

;; Workspaces Widgets ;;
(defwidget workspaces []
	(literal :content workspace))
(deflisten workspace "scripts/workspace")

;; Battery Widgets ;;
(defwidget bat []
	(box	:orientation "v"	
      :class "bat-container"	
			:space-evenly "false"
	(label
      :class "battery-icon"
			:halign "center"		
			:text battery	
			:tooltip "Battery: ${battery-cappacity}%")
  (label 
			:text battery-cappacity)))
(defpoll battery			:interval "1s"	"scripts/battery icon")
(defpoll battery-cappacity	:interval "1s"	"scripts/battery percent")

  ;; Wifi Widgets ;;
(defwidget wifi []
  (box	:orientation "v"  
        :class "wifi-container"	
        :tooltip wifi-name
  (button		:onclick "scripts/popup wifi" 
        :class "wifi-icon" wifi-icon)))
(defpoll wifi-icon :interval "1s" "scripts/wifi icon")
(defpoll wifi-name :interval "1s" "scripts/wifi name")

;; Brightness Widgets ;;
(defwidget bright []
  			(box    :orientation "v"  
			  	:space-evenly "false"  
          :spacing 2
          :tooltip "Brightness: ${brightness}%"
          :class "brightness-container"	
			    :halign "center"		
  			(label :class "brightness-icon" 
			  	   :text "󰃠")
  			(label :class "brightness" 
			  	   :text brightness)))
(defpoll brightness	:interval "1s"	"light -G | awk '{ print substr( $0, 1, length($0)-3) }'")

;; Volume Widgets ;;
(defwidget volum []
	(box    :orientation "v" 	  
          :space-evenly "false" 
          :spacing "2"
          :tooltip "Volume: ${current_volume}%"
          :class "volume-container"	
			    :halign "center"		
	(button   :onclick "scripts/popup audio"
            :class "volume-icon" "󰎈")
  			(label :class "current_volume" 
			  	   :text current_volume)))
(defpoll current_volume :interval "1s" "amixer sget Master | grep 'Right:' | awk -F'[][]' '{ print substr( $2, 1, length($2)-1) }'")

;; Control Panel Widgets ;;	
(defwidget control []
	(box :orientation "v" 
		 :space-evenly false  
		 :class "control"
(wifi)
(bat)
(bright)
(volum)))

;; Clock Widgets ;;
(defwidget time []
	(box	:orientation "v" 
			:class "time" 
			:valign "end"
	(button	:onclick "scripts/popup calendar"	
			:class "time-hour" hour)
	(button	:onclick "scripts/popup calendar"	
			:class "time-min"  min)))
(defpoll hour	:interval "1s"	"date '+%H'")
(defpoll min	:interval "1s"	"date '+%M'")

;; Calendar Widgets ;;
(defwidget cal []
	(box :class "cal-box" 
		 :orientation "v"
	(box :class "cal-inner-box"
	(calendar :class "cal" 
			  :day calendar_day 
			  :month calendar_month 
			  :year calendar_year))))
(defpoll calendar_day :interval "10h"
    "date '+%d'")
(defpoll calendar_month :interval "10h"
    "scripts/calendar")
(defpoll calendar_year :interval "10h"
    "date '+%Y'")


;; Top Widgets ;;
(defwidget top []
	(box	:orientation "v" 
			:space-evenly "false" 
			:valign "start" 
(launcher)
(time)
))

(defwidget middle []
	(box	:orientation "v" 
			:space-evenly "false" 
			:valign "center" 
(workspaces)
))

;; End Widgets ;;
(defwidget end []
	(box :orientation "v" 
		 :space-evenly "false" 
		 :valign "end" 
		 :spacing 5
  (control)
))

;; Bar Widgets ;;
(defwidget bar []
	(box :class "eww_bar" 
		 :orientation "v" 
		 :vexpand "false" 
		 :hexpand "false"
(top)
(middle)
(end)
))

(defwindow bar
	:geometry (geometry :x "0" 
						:y "10px" 
						:height "98%" 
						:width "47px")
	:monitor 0
	:reserve (struts :distance "70px" 
					 :side "left")
	:wm-ignore false
	:hexpand "false"
	:vexpand "false"
(bar))

;; Calendar Windows ;;
(defwindow calendar
	:geometry (geometry :x "82px" 
						:y "12px" 
						:width "270px" 
						:height "60px")
(cal))
